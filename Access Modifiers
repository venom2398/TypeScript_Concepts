Access modifiers control the visibility and accessibility of the class members (properties, methods, etc.).
There are three types of access modifiers in TypeScript: public, private, protected and readonly.

public: Accessible from anywhere (default in TypeScript).
private: Accessible only within the class.
protected: Accessible within the class and subclasses.
readonly: Ensures a property can be set only during initialization.

1) Public: - Members marked as public are accessible from anywhere: inside the class, outside the class, and in subclasses.
example: -
class Person {
  public name: string;

  constructor(name: string) {
    this.name = name;
  }

  public greet() {
    console.log(`Hello, ${this.name}`);
  }
}

const person = new Person("Alice");
console.log(person.name); // Accessible outside the class
person.greet();           // Accessible outside the class

2) Private: - Members marked as private are only accessible within the class they are defined in.
example: -
class Person {
  private age: number;

  constructor(age: number) {
    this.age = age;
  }

  private showAge() {
    console.log(`Age: ${this.age}`);
  }
}

const person = new Person(30);
// person.age;         // Error: 'age' is private
// person.showAge();   // Error: 'showAge' is private

3) Protected: - Members marked as protected are accessible within the class they are defined in and in any subclass that extends it.
example: -
class Person {
  protected name: string;

  constructor(name: string) {
    this.name = name;
  }
}

class Employee extends Person {
  displayName() {
    console.log(`Employee name is ${this.name}`); // Accessible in subclass
  }
}

const employee = new Employee("Bob");
// employee.name; // Error: 'name' is protected and not accessible outside

4) readonly: - The readonly modifier can be applied to properties to make them immutable after their initial assignment.
example: -
class Person {
  readonly id: number;
  public name: string;

  constructor(id: number, name: string) {
    this.id = id; // Can only be assigned in the constructor
    this.name = name;
  }
}

const person = new Person(1, "Alice");
// person.id = 2;      // Error: Cannot assign to 'id' because it is read-only
person.name = "kiran"; // Accessible and assignable
console.log(person.id); // Accessible, but read-only
console.log(person.name); // Accessible

